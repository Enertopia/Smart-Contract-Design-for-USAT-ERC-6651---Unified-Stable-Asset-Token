// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract AssetTokenization is ERC20, Pausable, Ownable {
  
  using SafeMath for uint;

  uint public registrationFee = 1 ether;

  enum AssetType {
    REAL_ESTATE, 
    COMMODITIES,
    COLLECTIBLES
  }

  struct Asset {
    AssetType assetType;
    string name;
    uint initialSupply;
    uint pricePerToken;
  }

  mapping(string => Asset) public assets;

  event AssetRegistered(string name, uint initialSupply, uint pricePerToken);
  event TokensMinted(address recipient, string assetName, uint amount);

  constructor() ERC20("AssetToken", "AT") {}

  function registerAsset(
    AssetType _assetType,
    string memory _name, 
    uint _initialSupply,
    uint _pricePerToken
  ) external onlyOwner whenNotPaused {
    
    require(!_exists(assets[_name]), "Asset already exists"); 

    assets[_name] = Asset({
      assetType: _assetType,
      name: _name,
      initialSupply: _initialSupply,
      pricePerToken: _pricePerToken
    });

    _mint(msg.sender, registrationFee);

    emit AssetRegistered(_name, _initialSupply, _pricePerToken);
  }

  function mintTokens(
    address recipient,
    string memory assetName,
    uint amount
  ) external onlyOwner whenNotPaused {
    
    assets[assetName].initialSupply = assets[assetName].initialSupply.add(amount);

    _mint(recipient, amount);

    emit TokensMinted(recipient, assetName, amount);
  }

  function transferFrom(address sender, address recipient, uint256 amount) public override whenNotPaused returns (bool) {
    _transfer(sender, recipient, amount);
    return true;
  }

  function approve(address spender, uint256 amount) public override whenNotPaused returns (bool) {
    _approve(msg.sender, spender, amount);
    return true;
  }

  function burn(uint amount) public {
    _burn(msg.sender, amount);
  }
  
  function pause() public onlyOwner {
    _pause();
  }

  function unpause() public onlyOwner {
    _unpause();
  }

  function _exists(Asset memory asset) internal view returns (bool) {
    return bytes(assets[asset.name].name).length > 0;
  }

  // Other ERC20 methods
}
