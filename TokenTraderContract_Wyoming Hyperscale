// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";

contract AssetTokenization is Initializable, ERC20Upgradeable, PausableUpgradeable, OwnableUpgradeable {
    uint public registrationFee;
    uint private profitPool;

    enum AssetType { REAL_ESTATE, COMMODITIES, COLLECTIBLES }
    enum ComplianceStatus { PENDING, COMPLIANT, NONCOMPLIANT }

    struct Asset {
        AssetType assetType;
        string name;
        uint initialSupply;
        uint pricePerToken;
        ComplianceStatus complianceStatus;
    }

    mapping(string => Asset) public assets;
    mapping(address => uint) public investments;

    event AssetRegistered(string name, AssetType assetType, uint initialSupply, uint pricePerToken, ComplianceStatus complianceStatus);
    event TokensMinted(address recipient, string assetName, uint amount);
    event InvestmentReceived(address investor, string assetName, uint amount);
    event ProfitDistributed(uint profitAmount);

    function initialize() public initializer {
        __ERC20_init("AssetToken", "AT");
        __Pausable_init();
        __Ownable_init();
        registrationFee = 1 ether;
        profitPool = 0;
    }

    function registerAsset(AssetType _assetType, string memory _name, uint _initialSupply, uint _pricePerToken) external onlyOwner whenNotPaused {
        require(bytes(assets[_name].name).length == 0, "Asset already exists");
        assets[_name] = Asset({
            assetType: _assetType,
            name: _name,
            initialSupply: _initialSupply,
            pricePerToken: _pricePerToken,
            complianceStatus: ComplianceStatus.PENDING
        });
        emit AssetRegistered(_name, _assetType, _initialSupply, _pricePerToken, ComplianceStatus.PENDING);
    }

    function setComplianceStatus(string memory _name, ComplianceStatus _status) external onlyOwner {
        require(bytes(assets[_name].name).length > 0, "Asset does not exist");
        assets[_name].complianceStatus = _status;
    }

    function investInAsset(string memory assetName, uint amount) public payable whenNotPaused {
        Asset memory asset = assets[assetName];
        require(asset.complianceStatus == ComplianceStatus.COMPLIANT, "Asset not compliant");
        require(msg.value == amount.mul(asset.pricePerToken), "Incorrect payment");
        
        uint tokensToMint = amount.mul(asset.pricePerToken);
        _mint(msg.sender, tokensToMint);
        investments[msg.sender] = investments[msg.sender].add(tokensToMint);
        
        emit InvestmentReceived(msg.sender, assetName, amount);
    }

    function distributeProfits() public onlyOwner {
        uint totalSupply = totalSupply();
        require(totalSupply > 0, "No tokens minted");
        require(profitPool > 0, "No profit to distribute");

        for (uint i = 0; i < totalSupply; i++) {
            address shareholder = ownerOf(i);
            uint shareholderBalance = balanceOf(shareholder);
            uint profitShare = profitPool.mul(shareholderBalance).div(totalSupply);
            payable(shareholder).transfer(profitShare);
        }

        emit ProfitDistributed(profitPool);
        profitPool = 0; // Reset the profit pool after distribution
    }

    function addProfits(uint _amount) public onlyOwner {
        profitPool = profitPool.add(_amount);
    }

    function updateRegistrationFee(uint _fee) public onlyOwner {
        registrationFee = _fee;
    }

    // Override required functions from parent contracts
    // Additional logic for pausing, unpausing, minting, and burning tokens
}

