// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";

/**
 * @title Verified Carbon Units
 * @dev This contract represents NFTs tied to verified carbon units, incorporating upgradeability and legal clarity.
 * The terms encoded in this contract are intended to reflect a Ricardian contract, ensuring that each NFT represents
 * a genuine carbon offset unit, with metadata providing details such as the asset's requirement, description, market,
 * price, and an environmental sustainability score (usatScore).
 */
contract VerifiedCarbonUnits is Initializable, ERC721URIStorageUpgradeable, OwnableUpgradeable {
    // Struct representing Verified Carbon Units metadata
    struct VerifiedCarbonUnitsMetadata {
        string assetRequirement;
        string assetDescription;
        string market;
        string assetPrice;  // Variable (Market Dependent)
        string usatScore;
    }

    // Mapping from token ID to its metadata
    mapping(uint256 => VerifiedCarbonUnitsMetadata) public tokenMetadata;

    // Event emitted when a new token with metadata is minted
    event VerifiedCarbonUnitsMinted(
        uint256 indexed tokenId,
        address indexed owner,
        string assetRequirement,
        string assetDescription,
        string market,
        string assetPrice,
        string usatScore
    );

    function initialize() public initializer {
        __ERC721URIStorage_init();
        __ERC721_init("USAT Verified Carbon Units", "USAT-VCU");
        __Ownable_init();
    }

    // Function to mint new Verified Carbon Units NFTs with metadata
    function mintVerifiedCarbonUnits(
        address account,
        uint256 tokenId,
        string memory assetRequirement,
        string memory assetDescription,
        string memory market,
        string memory assetPrice,
        string memory usatScore
    ) public onlyOwner {
        _mint(account, tokenId);

        tokenMetadata[tokenId] = VerifiedCarbonUnitsMetadata({
            assetRequirement: assetRequirement,
            assetDescription: assetDescription,
            market: market,
            assetPrice: assetPrice,
            usatScore: usatScore
        });

        emit VerifiedCarbonUnitsMinted(
            tokenId,
            account,
            assetRequirement,
            assetDescription,
            market,
            assetPrice,
            usatScore
        );
    }
    
    // Additional functions for managing Verified Carbon Units NFTs can be added here.
}
