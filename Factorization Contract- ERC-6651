// SPDX-License-Identifier: MIT
// Copyright (c) 2023 Emiliano German Solazzi Griminger

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

interface IERC6651Account {
    function isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4 magicValue);
}

contract TitleChainRegistry is ERC721, ERC721Burnable, Ownable {
    using SafeMath for uint256;

    uint256 private tokenIdCounter;
    mapping(uint256 => AssetInfo) private assetInfo;

    struct AssetInfo {
        string title;
        mapping(bytes32 => string) attachments;
        address factorizationContract;
        string creditType;
    }

    event FactorizationContractCreated(uint256 indexed tokenId, address factorizationContract);

    constructor() ERC721("TitleChain", "TC") {}

    function mintCredits(address to, string memory title, string memory creditType) external onlyOwner {
        uint256 tokenId = tokenIdCounter;
        tokenIdCounter = tokenIdCounter.add(1);

        _safeMint(to, tokenId);
        assetInfo[tokenId] = AssetInfo(title, creditType);
    }

    function transferCredits(address to, uint256 tokenId, string memory newTitle) external onlyOwner {
        require(_exists(tokenId), "Token does not exist");

        AssetInfo storage info = assetInfo[tokenId];

        _burn(tokenId);
        _safeMint(to, tokenId);
        info.title = newTitle;
        info.factorizationContract = address(0); // Clear factorization contract on transfer
    }

    function getTitle(uint256 tokenId) external view returns (string memory) {
        require(_exists(tokenId), "Token does not exist");
        return assetInfo[tokenId].title;
    }

    function getCreditType(uint256 tokenId) external view returns (string memory) {
        require(_exists(tokenId), "Token does not exist");
        return assetInfo[tokenId].creditType;
    }

    function validateCreditsSignature(uint256 tokenId, bytes32 hash, bytes calldata signature) external view {
        require(_exists(tokenId), "Token does not exist");

        address account = ownerOf(tokenId);
        IERC6651Account accountContract = IERC6651Account(account);
        require(accountContract.isValidSignature(hash, signature) == bytes4(0x20c13b0b), "Invalid signature");
        // Additional validation logic for credits.
    }

    function attachAsset(uint256 tokenId, string memory key, string memory value) external onlyOwner {
        require(_exists(tokenId), "Token does not exist");
        AssetInfo storage info = assetInfo[tokenId];
        bytes32 keyHash = keccak256(abi.encodePacked(key));
        info.attachments[keyHash] = value;
    }

    function getAsset(uint256 tokenId, string memory key) external view returns (string memory) {
        require(_exists(tokenId), "Token does not exist");
        bytes32 keyHash = keccak256(abi.encodePacked(key));
        return assetInfo[tokenId].attachments[keyHash];
    }

    function updateAsset(uint256 tokenId, string memory key, string memory newValue) external onlyOwner {
        require(_exists(tokenId), "Token does not exist");
        AssetInfo storage info = assetInfo[tokenId];
        bytes32 keyHash = keccak256(abi.encodePacked(key));
        info.attachments[keyHash] = newValue;
    }

    function removeAsset(uint256 tokenId, string memory key) external onlyOwner {
        require(_exists(tokenId), "Token does not exist");
        AssetInfo storage info = assetInfo[tokenId];
        bytes32 keyHash = keccak256(abi.encodePacked(key));
        delete info.attachments[keyHash];
    }

    function createFactorizationContract(uint256 tokenId, address factorizationContract) external onlyOwner {
        require(_exists(tokenId), "Token does not exist");
        AssetInfo storage info = assetInfo[tokenId];
        require(info.factorizationContract == address(0), "Factorization contract already exists");

        info.factorizationContract = factorizationContract;
        emit FactorizationContractCreated(tokenId, factorizationContract);
    }

    function getFactorizationContract(uint256 tokenId) external view returns (address) {
        require(_exists(tokenId), "Token does not exist");
        return assetInfo[tokenId].factorizationContract;
    }
}
