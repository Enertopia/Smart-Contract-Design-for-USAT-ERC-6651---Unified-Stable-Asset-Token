// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

contract TitleChainRegistryUpgradeable is Initializable, ERC721Upgradeable, ERC721BurnableUpgradeable, OwnableUpgradeable, UUPSUpgradeable {
    uint256 private tokenIdCounter;
    mapping(uint256 => AssetInfo) private assetInfo;

    struct Attachment {
        string key;
        string value;
    }

    struct AssetInfo {
        string title;
        Attachment[] attachments; // Adjusted to use an array for easier external access
        address factorizationContract; // Optional: Remove if unused
        string creditType;
    }

    event AssetMinted(uint256 indexed tokenId, address to, string title, string creditType);
    event AssetAttached(uint256 indexed tokenId, string key, string value);
    event FactorizationContractCreated(uint256 indexed tokenId, address factorizationContract); // Ensure usage or remove if unnecessary

    function initialize() public initializer {
        __ERC721_init("TitleChain", "TC");
        __ERC721Burnable_init();
        __Ownable_init();
        __UUPSUpgradeable_init();
        tokenIdCounter = 0;
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {
        // Consider implementing additional security measures like time locks or multi-signature requirements
    }

    function mintCredits(address to, string memory title, string memory creditType) public onlyOwner {
        tokenIdCounter += 1; // Simplified increment
        uint256 tokenId = tokenIdCounter;

        _safeMint(to, tokenId);
        AssetInfo storage newAsset = assetInfo[tokenId];
        newAsset.title = title;
        newAsset.creditType = creditType;

        emit AssetMinted(tokenId, to, title, creditType);
    }

    function attachAsset(uint256 tokenId, string memory key, string memory value) public onlyOwner {
        require(_exists(tokenId), "Token does not exist");
        AssetInfo storage info = assetInfo[tokenId];
        info.attachments.push(Attachment(key, value)); // Simplified attachment

        emit AssetAttached(tokenId, key, value);
    }

    // Consider adding batch operations for minting and attaching assets

    // Placeholder for other functions (e.g., transferCredits, getTitle) with notes on upgradeability and Ricardian contracts as necessary
}
