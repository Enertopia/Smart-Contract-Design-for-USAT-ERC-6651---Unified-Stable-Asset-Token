// SPDX-License-Identifier: MIT 
// Copyright (c) 2023 Emiliano German Solazzi Griminger

pragma solidity ^0.8.15;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";

contract CreditFutures is ERC20, ReentrancyGuard, AccessControl {

  // Roles
  bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
  bytes32 public constant BURNER_ROLE = keccak256("BURNER_ROLE");

  // Immutable total supply struct
  struct CreditSupply {
    uint256 totalSupply;
    mapping(bytes32 => uint256) creditTypeSupply; 
  }

  CreditSupply public immutable totalCreditSupply;

  // Events
  event CreditMinted(address indexed minter, address indexed to, uint256 amount, bytes32 indexed creditTypeHash);
  event CreditBurned(address indexed burner, address indexed from, uint256 amount, bytes32 indexed creditTypeHash);

  constructor() ERC20("Credit Futures Token", "CFT") {
    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
    _setupRole(MINTER_ROLE, msg.sender);
    _setupRole(BURNER_ROLE, msg.sender);
  }

  function mint(address to, uint256 amount, bytes32 creditTypeHash) external onlyMinter nonReentrant {
    // Implement minting logic
    _mint(to, amount);
    totalCreditSupply.totalSupply += amount;
    totalCreditSupply.creditTypeSupply[creditTypeHash] += amount;

    emit CreditMinted(msg.sender, to, amount, creditTypeHash);
  }

  function burn(address from, uint256 amount, bytes32 creditTypeHash) external onlyBurner nonReentrant {
    // Implement burning logic
    _burn(from, amount);
    totalCreditSupply.totalSupply -= amount;
    totalCreditSupply.creditTypeSupply[creditTypeHash] -= amount;

    emit CreditBurned(msg.sender, from, amount, creditTypeHash);
  }

  // Admin functions
  function addMinter(address minter) external onlyAdmin {
    grantRole(MINTER_ROLE, minter);
  }

  function removeMinter(address minter) external onlyAdmin {
    revokeRole(MINTER_ROLE, minter);
  }

  function addBurner(address burner) external onlyAdmin {
    grantRole(BURNER_ROLE, burner);
  }

  function removeBurner(address burner) external onlyAdmin {
    revokeRole(BURNER_ROLE, burner);
  }

  // Modifiers
  modifier onlyMinter() {
    require(hasRole(MINTER_ROLE, msg.sender), "Caller is not a minter");
    _;
  }

  modifier onlyBurner() {
    require(hasRole(BURNER_ROLE, msg.sender), "Caller is not a burner");
    _;
  }

  modifier onlyAdmin() {
    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Caller is not an admin");
    _;
  }
}


}
