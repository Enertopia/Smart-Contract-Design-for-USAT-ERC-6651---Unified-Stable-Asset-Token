// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * @title RenewableCreditToken
 * @dev ERC-20 compliant token representing renewable credits with UTXO model.
 * Each UTXO represents a batch of tokens with associated attributes.
 */
contract RenewableCreditToken is ERC20Burnable, Ownable {
    struct RenewableCreditAttributes {
        uint256 assetScore;
        uint256 esgScore;
        // Additional attributes can be added here
    }

    struct RenewableCreditUTXO {
        uint256 amount;
        RenewableCreditAttributes attributes;
        address owner;
    }

    // UTXO ID to UTXO mapping
    mapping(uint256 => RenewableCreditUTXO) private _UTXOs;

    // Counter for new UTXO IDs
    uint256 private _nextUTXOId = 1;

    event RenewableCreditMinted(uint256 indexed utxoId, address indexed to, uint256 amount, RenewableCreditAttributes attributes);
    event UTXORetired(uint256 indexed utxoId);
    event UTXOTransferred(uint256 indexed utxoId, address indexed from, address indexed to);

    constructor() ERC20("Renewable Credit Token", "RCT") {}

    /**
     * @dev Mints tokens and creates a new UTXO with the specified attributes.
     * @param to The address that will receive the minted tokens.
     * @param amount The amount of tokens to mint.
     * @param attributes The attributes associated with the new UTXO.
     */
    function mintRenewableCredit(address to, uint256 amount, RenewableCreditAttributes calldata attributes) external onlyOwner {
        require(to != address(0), "Mint to the zero address");
        require(amount > 0, "Amount must be greater than zero");
        require(attributes.assetScore > 0, "Asset score must be greater than zero");
        require(attributes.esgScore > 0, "ESG score must be greater than zero");

        _mint(to, amount);

        uint256 utxoId = _nextUTXOId++;
        _UTXOs[utxoId] = RenewableCreditUTXO(amount, attributes, to);

        emit RenewableCreditMinted(utxoId, to, amount, attributes);
    }

    /**
     * @dev Retires a UTXO, burning the associated tokens.
     * @param utxoId The ID of the UTXO to retire.
     */
    function retireUTXO(uint256 utxoId) external {
        require(_UTXOs[utxoId].amount != 0, "UTXO does not exist");
        require(_UTXOs[utxoId].owner == msg.sender, "Caller is not the owner of the UTXO");

        // Burn the tokens associated with the UTXO
        _burn(msg.sender, _UTXOs[utxoId].amount);

        emit UTXORetired(utxoId);

        // Remove the UTXO from the mapping
        delete _UTXOs[utxoId];
    }

    /**
     * @dev Transfers ownership of a UTXO to another address.
     * @param utxoId The ID of the UTXO to transfer.
     * @param to The address to transfer the UTXO to.
     */
    function transferUTXO(uint256 utxoId, address to) external {
        require(_UTXOs[utxoId].amount != 0, "UTXO does not exist");
        require(_UTXOs[utxoId].owner == msg.sender, "Caller is not the owner of the UTXO");
        require(to != address(0), "Transfer to the zero address");

        _UTXOs[utxoId].owner = to;

        emit UTXOTransferred(utxoId, msg.sender, to);
    }

    /**
     * @dev Retrieves the details of a UTXO.
     * @param utxoId The ID of the UTXO to retrieve.
     * @return The UTXO details.
     */
    function getUTXO(uint256 utxoId) external view returns (RenewableCreditUTXO memory) {
        require(_UTXOs[utxoId].amount != 0, "UTXO does not exist");
        return _UTXOs[utxoId];
    }
}
