// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";

contract USAT45QTaxCreditsNFT is Initializable, ERC721EnumerableUpgradeable, OwnableUpgradeable {
    // Token details
    string public constant NAME = "USAT 45Q Tax Credits";
    string public constant SYMBOL = "USAT-45Q";

    // Struct representing NFT metadata
    struct NFTMetadata {
        string assetRequirement;
        string assetDescription;
        string market;
        string assetPrice;
        string usatScore;
    }

    // Mapping from token ID to its metadata
    mapping(uint256 => NFTMetadata) public tokenMetadata;

    // Event emitted when a new token with metadata is minted
    event NFTMinted(
        uint256 indexed tokenId,
        address indexed owner,
        string assetRequirement,
        string assetDescription,
        string market,
        string assetPrice,
        string usatScore
    );

    // Initialize the contract
    function initialize(address initialOwner) public initializer {
        __ERC721_init(NAME, SYMBOL);
        __Ownable_init_unchained(initialOwner);
    }

    // Function to mint new NFTs with metadata
    function mintNFT(
        address account,
        uint256 tokenId,
        string memory assetRequirement,
        string memory assetDescription,
        string memory market,
        string memory assetPrice,
        string memory usatScore
    ) external onlyOwner {
        _mint(account, tokenId);

        tokenMetadata[tokenId] = NFTMetadata({
            assetRequirement: assetRequirement,
            assetDescription: assetDescription,
            market: market,
            assetPrice: assetPrice,
            usatScore: usatScore
        });

        emit NFTMinted(
            tokenId,
            account,
            assetRequirement,
            assetDescription,
            market,
            assetPrice,
            usatScore
        );
    }

    // Helper function to translate proxy token ID to DAO token ID
    function idToDAO(uint256 proxyTokenId) public pure returns (uint256 daoTokenId) {
        // Perform the necessary translation logic here to extract the release ID from proxyTokenId
        // For example, daoTokenId = proxyTokenId >> 100; // Assuming the release ID is in the upper bits
        // Adjust the shift and mask based on your serialization format
        daoTokenId = proxyTokenId; // Placeholder logic, replace with actual logic
    }
}
