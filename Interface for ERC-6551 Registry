// SPDX-License-Identifier: MIT
// Copyright 2023 Emiliano German Solazzi Griminger

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/interfaces/IERC1271.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

interface IERC6551Account {
    function isValidSigner(address signer) external view returns (bool);
}

interface IERC6551Executable {
    function execute(address to, uint256 value, bytes calldata data) external payable returns (bytes memory result);
}

contract ERC6551Account is Ownable, IERC1271, IERC6551Account, IERC6551Executable, ReentrancyGuard {
    using ECDSA for bytes32;
    using SafeMath for uint256;

    uint256 private constant MAX_UINT256 = type(uint256).max;

    uint256 public state;
    uint256 public maxGasCost = 1000000; // Example: Set a reasonable maximum gas cost.

    receive() external payable {}

    function execute(address to, uint256 value, bytes calldata data)
        external
        payable
        onlyOwner
        nonReentrant
        returns (bytes memory result)
    {
        require(gasleft() >= maxGasCost, "Gas limit exceeded");
        state = state.add(1);
        (bool success, bytes memory resultData) = to.call{value: value}(data);
        require(success, "Transaction execution failed");
        return resultData;
    }

    function isValidSigner(address signer) external view override returns (bool) {
        return signer == owner();
    }

    function isValidSignature(bytes32 hash, bytes memory signature) external view override returns (bytes4) {
        require(hash.toEthSignedMessageHash().recover(signature) == owner(), "Invalid signature");
        return IERC1271.isValidSignature.selector;
    }

    function supportsInterface(bytes4 interfaceId) external pure override returns (bool) {
        return
            interfaceId == type(IERC1271).interfaceId ||
            interfaceId == type(IERC6551Account).interfaceId ||
            interfaceId == type(IERC6551Executable).interfaceId ||
            interfaceId == type(ReentrancyGuard).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    function token() external view override returns (uint256, address, uint256) {
        // Actual implementation needed for your specific use case
        return (0, address(0), 0);
    }

    function setMaxGasCost(uint256 _maxGasCost) external onlyOwner {
        maxGasCost = _maxGasCost;
    }
}


