// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

contract CarbonCreditToken is Initializable, ERC721URIStorageUpgradeable, OwnableUpgradeable, AccessControlUpgradeable, UUPSUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {
    using CountersUpgradeable for CountersUpgradeable.Counter;
    CountersUpgradeable.Counter private _tokenIdCounter;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    struct CarbonCreditData {
        uint256 tokenId;
        uint256 timestamp;
        string projectIdentifier;
        uint256 carbonTonnes;
    }

    mapping(uint256 => CarbonCreditData) private _carbonCreditsData;

    event CarbonCreditMinted(address indexed to, uint256 indexed tokenId, string projectIdentifier, uint256 carbonTonnes);
    event CarbonCreditBurned(uint256 indexed tokenId);

    function initialize() public initializer {
        __ERC721_init("CarbonMineralizationCredit", "CMC");
        __ERC721URIStorage_init();
        __Ownable_init();
        __AccessControl_init();
        __UUPSUpgradeable_init();
        __ReentrancyGuard_init();
        __Pausable_init();

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}

    function pause() public onlyRole(PAUSER_ROLE) {
        _pause();
    }

    function unpause() public onlyRole(PAUSER_ROLE) {
        _unpause();
    }

    function safeMint(address to, string memory uri, string memory projectIdentifier, uint256 carbonTonnes) public onlyRole(MINTER_ROLE) nonReentrant whenNotPaused {
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, uri);

        CarbonCreditData memory newCreditData = CarbonCreditData({
            tokenId: tokenId,
            timestamp: block.timestamp,
            projectIdentifier: projectIdentifier,
            carbonTonnes: carbonTonnes
        });
        _carbonCreditsData[tokenId] = newCreditData;

        emit CarbonCreditMinted(to, tokenId, projectIdentifier, carbonTonnes);
    }

    function burn(uint256 tokenId) public {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "Caller is not owner nor approved");
        _burn(tokenId);
        delete _carbonCreditsData[tokenId];
        emit CarbonCreditBurned(tokenId);
    }

    function getCarbonCreditData(uint256 tokenId) public view returns (CarbonCreditData memory) {
        require(_exists(tokenId), "Query for nonexistent token");
        return _carbonCreditsData[tokenId];
    }

    // Implementation of the ERC721URIStorage _beforeTokenTransfer hook to enforce additional checks or logic
    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721URIStorageUpgradeable, ERC721Upgradeable) whenNotPaused {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    // Add other functions here...
}
