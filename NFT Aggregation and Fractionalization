// SPDX-License-Identifier: MIT
// Copyright (c) 2023 Emiliano German Solazzi Griminger

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

/**
 * @title TitleChainRegistry
 * @author Emiliano German Solazzi Griminger 
 * @notice ERC721 contract to manage tokenized asset titles and metadata
*/
contract TitleChainRegistry is ERC721, Ownable {

  using Counters for Counters.Counter;

  Counters.Counter private _tokenIdCounter;

  mapping (uint256 => AssetData) private _assets;

  struct AssetData {
    string title;
    mapping (string => string) metadata;
    address factorizationContract; 
  }

  event AssetMinted(uint256 indexed tokenId, address indexed owner);

  event AssetTransferred(uint256 indexed tokenId, address indexed from, address indexed to);

  event MetadataSet(uint256 indexed tokenId, string key, string value);

  event FactorizationSet(uint256 indexed tokenId, address factorizationContract);

  constructor() ERC721("TitleChain", "TC") {}

  modifier onlyOwnerOrOperator() {
    require(msg.sender == owner() || operators[msg.sender], "Unauthorized");
    _;
  }

  mapping (address => bool) public operators;

  function setOperator(address operator, bool approved) external onlyOwner {
    operators[operator] = approved;
  }

  function mint(address to, string memory title) external onlyOwnerOrOperator {
    uint256 tokenId = _tokenIdCounter.current();
    _tokenIdCounter.increment();
    _safeMint(to, tokenId);

    AssetData storage asset = _assets[tokenId];
    asset.title = title;

    emit AssetMinted(tokenId, to);
  }  

  // Other functions 

  function burn(uint256 tokenId) external onlyOwnerOrOperator {
    require(_exists(tokenId), "Nonexistent token");
    _burn(tokenId);
  }

}

