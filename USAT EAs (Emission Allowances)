// SPDX-License-Identifier: MIT
pragma solidity ^0.8.16;

import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

contract EmissionAllowances is Initializable, ERC721Upgradeable, OwnableUpgradeable, UUPSUpgradeable {
    struct EmissionAllowanceMetadata {
        string assetRequirement;
        string assetDescription;
        string market;
        string assetPrice;
        string usatScore;
    }

    mapping(uint256 => EmissionAllowanceMetadata) public tokenMetadata;

    event EmissionAllowanceMinted(
        uint256 indexed tokenId,
        address indexed owner,
        string assetRequirement,
        string assetDescription,
        string market,
        string assetPrice,
        string usatScore
    );

    function initialize(address initialOwner) public initializer {
        __ERC721_init("USAT Emission Allowances", "USAT-EA");
        __Ownable_init();
        transferOwnership(initialOwner);
    }

    function mintEmissionAllowance(
        address account,
        uint256 tokenId,
        string memory assetRequirement,
        string memory assetDescription,
        string memory market,
        string memory assetPrice,
        string memory usatScore
    ) external onlyOwner {
        _mint(account, tokenId);

        tokenMetadata[tokenId] = EmissionAllowanceMetadata({
            assetRequirement: assetRequirement,
            assetDescription: assetDescription,
            market: market,
            assetPrice: assetPrice,
            usatScore: usatScore
        });

        emit EmissionAllowanceMinted(
            tokenId,
            account,
            assetRequirement,
            assetDescription,
            market,
            assetPrice,
            usatScore
        );
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}
}
