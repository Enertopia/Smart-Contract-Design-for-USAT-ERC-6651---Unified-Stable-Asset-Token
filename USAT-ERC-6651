// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

interface IERC6651Account {
    function isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4 magicValue);
}

contract TitleChainRegistry is ERC721, ERC721Burnable, Ownable {
    uint256 private tokenIdCounter;

    // Mapping to store asset titles associated with token IDs
    mapping(uint256 => string) private assetTitles;

    constructor() ERC721("TitleChain", "TC") {}

    /**
     * @dev Mint a new USAT with a specific title.
     * @param to The address to mint the token to.
     * @param title The title associated with the minted USAT.
     */
    function mintUSAT(address to, string memory title) external onlyOwner {
        uint256 tokenId = tokenIdCounter;
        tokenIdCounter++;

        _safeMint(to, tokenId);
        assetTitles[tokenId] = title;
    }

    /**
     * @dev Transfer a USAT with updating title and ownership.
     * @param to The address to transfer the token to.
     * @param tokenId The ID of the token to be transferred.
     * @param newTitle The new title associated with the transferred USAT.
     */
    function transferUSAT(address to, uint256 tokenId, string memory newTitle) external onlyOwner {
        require(_exists(tokenId), "Token does not exist");

        // Burn the existing token
        _burn(tokenId);

        // Mint a new token with updated title
        _safeMint(to, tokenId);
        assetTitles[tokenId] = newTitle;
    }

    /**
     * @dev Get the title of a specific USAT.
     * @param tokenId The ID of the USAT to retrieve the title for.
     * @return The title associated with the specified USAT.
     */
    function getTitle(uint256 tokenId) external view returns (string memory) {
        require(_exists(tokenId), "Token does not exist");
        return assetTitles[tokenId];
    }

    /**
     * @dev Validate the signature for a USAT action.
     * @param tokenId The ID of the USAT for which the signature is being validated.
     * @param hash The hash of the action being signed.
     * @param signature The signature to be validated.
     */
    function validateSignature(uint256 tokenId, bytes32 hash, bytes calldata signature) external view {
        require(_exists(tokenId), "Token does not exist");

        address account = ownerOf(tokenId);

        // Check if the signer is a valid signer for token-bound accounts
        IERC6651Account accountContract = IERC6651Account(account);
        require(accountContract.isValidSignature(hash, signature) == bytes4(0x20c13b0b), "Invalid signature");
    }
}
