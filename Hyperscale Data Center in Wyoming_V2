// SPDX-License-Identifier: MIT
// Copyright (c) 2023 Emiliano German Solazzi Griminger

pragma solidity ^0.8.15;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract WyomingCredits is ERC20, ReentrancyGuard, AccessControl {
  using SafeMath for uint256;

  bytes32 public constant CARBON = keccak256("CarbonOffset");
  bytes32 public constant WATER = keccak256("WaterOffset");
  bytes32 public constant ESRIN = keccak256("ESRIN");

  uint256 public carbonSupply; 
  uint256 public waterSupply;
  uint256 public esrinSupply;

  mapping(address => uint256) public carbonBalance;
  mapping(address => uint256) public waterBalance;
  mapping(address => uint256) public esrinBalance;

  event CarbonRedeemed(address indexed user, uint256 amount);

  uint256 public constant RECPricing = 20; 

  uint256 public totalCarbonCreditsUSATs;

  constructor() ERC20("Wyoming Credit", "WCR") {
    carbonSupply = 419500 * 20;
    waterSupply = 10 * 1e9; 
    esrinSupply = 1.5 * 1e6;

    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
  }

  function redeemCarbon(uint256 amount) external nonReentrant {
    carbonBalance[msg.sender] = carbonBalance[msg.sender].sub(amount);

    _burn(msg.sender, amount);

    emit CarbonRedeemed(msg.sender, amount);

    uint256 carbonUSATs = amount.mul(RECPricing).div(20);

    totalCarbonCreditsUSATs = totalCarbonCreditsUSATs.add(carbonUSATs);
    
    _mint(msg.sender, carbonUSATs);
  }

  // Other credit types and improvements
}
