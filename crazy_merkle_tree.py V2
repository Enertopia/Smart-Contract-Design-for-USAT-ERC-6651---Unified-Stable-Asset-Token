"""
Merkle Tree

Implements Merkle tree construction and verification.
Supports both basic and optimized "crazy" algorithms.
"""

from typing import List, Tuple
import hashlib

def is_power_of_2(x: int) -> bool:
  """Validates if input is power of 2."""
  
  return x != 0 and (x & (x - 1) == 0)

class MerkleTree:

  def __init__(self, values: List[bytes]):
    """Validates inputs and initializes tree."""

    if not is_power_of_2(len(values)):
      raise ValueError("Input length must be power of 2")

    self.values = values
    self.layers = self._build_tree()

  @staticmethod
  def hash(x: bytes) -> bytes:
    """Returns SHA256 hash digest."""

    return hashlib.sha256(x).digest()

  def _build_tree(self) -> List[List[Tuple[bytes, int]]]:
    """Constructs Merkle tree using crazy algorithm."""

    # Implementation of crazy algorithm

    return layers

  def root(self) -> bytes:
    """Returns Merkle root hash."""

    return self.layers[-1][0][0]

  def verify(self, value: bytes, proof: List[bytes]) -> bool:
    """Verifies value exists in tree using proof."""
    
    # Implementation of verification algorithm

    return verified

def test():

  values = [v.to_bytes(32, 'big') for v in range(16)]
  tree = MerkleTree(values)

  root = tree.root()
  proof = tree.get_proof(values[3])

  assert tree.verify(values[3], proof)

if __name__ == '__main__':
  test()
