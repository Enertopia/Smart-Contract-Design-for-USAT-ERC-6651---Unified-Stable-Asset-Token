import hashlib

def hash(x):
    return hashlib.sha256(x).digest()

def is_power_of_2(x):
    return x & (x - 1) == 0

def crazy_merkle(values):
    assert is_power_of_2(sum(x[1] for x in values))

    if len(values) == 1 and values[0][1] == 1:
        return values[0][0]

    next_layer = []
    subtract_from_next = 0

    for i in range(len(values)):
        count = values[i][1] - subtract_from_next

        if count >= 2:
            next_layer.append((hash(values[i][0] * 2), count // 2))

        if count % 2 == 1:
            next_layer.append((hash(values[i][0] + values[i + 1][0]), 1))
            subtract_from_next = 1
        else:
            subtract_from_next = 0

    return crazy_merkle(next_layer)

def flatten(values):
    return [value for value, repeats in values for _ in range(repeats)]

def basic_merkle(items):
    assert is_power_of_2(len(items))

    tree = [None] + items

    for i in range(len(items) - 1, 0, -1):
        tree[i] = hash(tree[i * 2] + tree[i * 2 + 1])

    return tree[1]

def test():
    values = [(i.to_bytes(32, 'big'), i ** 2) for i in range(1, 100)]
    values.append((b'doge' * 8, 2**19 - sum(i**2 for i in range(1, 100))))

    x1 = crazy_merkle(values)
    x2 = basic_merkle(flatten(values))

    assert x1 == x2
    print('Root match')

if __name__ == '__main__':
    test()
